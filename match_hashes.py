#!/usr/bin/env python3
"""
Script 3: Match the Hashes

This script loads the CSV files generated by the previous scripts and creates a final mapping
between local creative files and Meta ad platform creatives using perceptual hashes.

Usage:
    python3 match_hashes.py
    
Example:
    python3 match_hashes.py
"""

import os
import sys
import argparse
from typing import Tuple, Optional
import pandas as pd


def load_local_hashes(file_path: str = "local_creative_hashes.csv") -> pd.DataFrame:
    """
    Load local creative hashes from CSV file.
    
    Args:
        file_path: Path to the local hashes CSV file
        
    Returns:
        DataFrame containing local creative hashes
        
    Raises:
        FileNotFoundError: If the CSV file doesn't exist
        pd.errors.EmptyDataError: If the CSV file is empty
    """
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Local hashes file not found: {file_path}")
        
        local_df = pd.read_csv(file_path)
        
        # Validate required columns
        required_columns = ['filename', 'phash']
        missing_columns = [col for col in required_columns if col not in local_df.columns]
        if missing_columns:
            raise ValueError(f"Missing required columns in {file_path}: {missing_columns}")
        
        print(f"‚úÖ Loaded {len(local_df)} local creatives from: {file_path}")
        return local_df
        
    except pd.errors.EmptyDataError:
        raise ValueError(f"Local hashes file is empty: {file_path}")
    except Exception as e:
        raise Exception(f"Error loading local hashes from {file_path}: {e}")


def load_platform_hashes(file_path: str = "platform_creative_hashes_META.csv") -> pd.DataFrame:
    """
    Load platform creative hashes from CSV file.
    
    Args:
        file_path: Path to the platform hashes CSV file
        
    Returns:
        DataFrame containing platform creative hashes
        
    Raises:
        FileNotFoundError: If the CSV file doesn't exist
        pd.errors.EmptyDataError: If the CSV file is empty
    """
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Platform hashes file not found: {file_path}")
        
        platform_df = pd.read_csv(file_path)
        
        # Validate required columns
        required_columns = ['ad_id', 'platform', 'phash']
        missing_columns = [col for col in required_columns if col not in platform_df.columns]
        if missing_columns:
            raise ValueError(f"Missing required columns in {file_path}: {missing_columns}")
        
        print(f"‚úÖ Loaded {len(platform_df)} platform creatives from: {file_path}")
        return platform_df
        
    except pd.errors.EmptyDataError:
        raise ValueError(f"Platform hashes file is empty: {file_path}")
    except Exception as e:
        raise Exception(f"Error loading platform hashes from {file_path}: {e}")


def perform_hash_matching(local_df: pd.DataFrame, platform_df: pd.DataFrame) -> pd.DataFrame:
    """
    Perform hash matching between local and platform creatives.
    
    Args:
        local_df: DataFrame containing local creative hashes
        platform_df: DataFrame containing platform creative hashes
        
    Returns:
        DataFrame containing successful matches
    """
    print("\nüîç Performing hash matching...")
    
    # Perform inner join on phash column
    merged_df = pd.merge(
        local_df,
        platform_df,
        on='phash',
        how='inner',
        suffixes=('_local', '_platform')
    )
    
    print(f"‚úÖ Found {len(merged_df)} exact hash matches")
    
    return merged_df


def format_final_mapping(merged_df: pd.DataFrame) -> pd.DataFrame:
    """
    Format the merged DataFrame into the final mapping format.
    
    Args:
        merged_df: DataFrame containing merged local and platform data
        
    Returns:
        Formatted DataFrame with selected and renamed columns
    """
    print("\nüìã Formatting final mapping...")
    
    # Select and rename columns for clarity
    final_mapping = merged_df[[
        'filename',      # Local filename
        'platform',      # Platform name
        'ad_id',         # Platform ad ID
        'phash'          # Perceptual hash
    ]].copy()
    
    # Rename columns for clarity
    final_mapping.columns = ['gdrive_filename', 'platform', 'ad_id', 'phash']
    
    # Sort by filename for better readability
    final_mapping = final_mapping.sort_values('gdrive_filename')
    
    print(f"‚úÖ Formatted {len(final_mapping)} matches")
    
    return final_mapping


def save_final_mapping(final_mapping: pd.DataFrame, output_file: str = "final_creative_mapping_META.csv") -> None:
    """
    Save the final mapping to a CSV file.
    
    Args:
        final_mapping: DataFrame containing the final mapping
        output_file: Name of the output CSV file
    """
    try:
        final_mapping.to_csv(output_file, index=False)
        print(f"üíæ Saved final mapping to: {output_file}")
        
    except Exception as e:
        raise Exception(f"Error saving final mapping to {output_file}: {e}")


def print_summary(local_df: pd.DataFrame, platform_df: pd.DataFrame, final_mapping: pd.DataFrame) -> None:
    """
    Print a summary of the matching results.
    
    Args:
        local_df: DataFrame containing local creative hashes
        platform_df: DataFrame containing platform creative hashes
        final_mapping: DataFrame containing successful matches
    """
    total_local = len(local_df)
    total_platform = len(platform_df)
    successful_matches = len(final_mapping)
    
    # Calculate match rates
    local_match_rate = (successful_matches / total_local * 100) if total_local > 0 else 0
    platform_match_rate = (successful_matches / total_platform * 100) if total_platform > 0 else 0
    
    print("\n" + "=" * 60)
    print("üìä MATCHING SUMMARY")
    print("=" * 60)
    print(f"Total local creatives fingerprinted: {total_local}")
    print(f"Total Meta creatives fingerprinted: {total_platform}")
    print(f"Successful matches found: {successful_matches}")
    print(f"Match Rate (local): {local_match_rate:.1f}%")
    print(f"Match Rate (platform): {platform_match_rate:.1f}%")
    print("=" * 60)
    
    if successful_matches > 0:
        print("\nüéâ Successfully created mapping between local files and Meta ad IDs!")
        print(f"üìÅ Output file: final_creative_mapping_META.csv")
    else:
        print("\n‚ö†Ô∏è  No matches found. This could indicate:")
        print("   - Different image versions between local and platform")
        print("   - Missing creatives in one of the sources")
        print("   - Different image formats or processing")


def validate_input_files(local_file: str, platform_file: str) -> None:
    """
    Validate that input files exist and are accessible.
    
    Args:
        local_file: Path to local hashes file
        platform_file: Path to platform hashes file
    """
    missing_files = []
    
    if not os.path.exists(local_file):
        missing_files.append(local_file)
    
    if not os.path.exists(platform_file):
        missing_files.append(platform_file)
    
    if missing_files:
        print("‚ùå Missing required input files:")
        for file in missing_files:
            print(f"   - {file}")
        print("\nPlease ensure both Script 1 and Script 2 have been run successfully.")
        sys.exit(1)


def main():
    """Main execution function."""
    parser = argparse.ArgumentParser(
        description="Match local and platform creative hashes to create final mapping",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python3 match_hashes.py
  python3 match_hashes.py -l my_local_hashes.csv -p my_platform_hashes.csv
  python3 match_hashes.py -o my_final_mapping.csv
        """
    )
    
    parser.add_argument(
        "-l", "--local-file",
        default="local_creative_hashes.csv",
        help="Local hashes CSV file (default: local_creative_hashes.csv)"
    )
    
    parser.add_argument(
        "-p", "--platform-file",
        default="platform_creative_hashes_META.csv",
        help="Platform hashes CSV file (default: platform_creative_hashes_META.csv)"
    )
    
    parser.add_argument(
        "-o", "--output",
        default="final_creative_mapping_META.csv",
        help="Output CSV filename (default: final_creative_mapping_META.csv)"
    )
    
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Enable verbose output"
    )
    
    args = parser.parse_args()
    
    try:
        print("üîç Creative Hash Matching System")
        print("=" * 40)
        
        # Validate input files
        validate_input_files(args.local_file, args.platform_file)
        
        # Load input data
        print("\nüìÇ Loading input files...")
        local_df = load_local_hashes(args.local_file)
        platform_df = load_platform_hashes(args.platform_file)
        
        if args.verbose:
            print(f"\nLocal data preview:")
            print(local_df.head())
            print(f"\nPlatform data preview:")
            print(platform_df.head())
        
        # Perform hash matching
        merged_df = perform_hash_matching(local_df, platform_df)
        
        if len(merged_df) == 0:
            print("\n‚ö†Ô∏è  No matches found. Check that both files contain the same images.")
            print("This could happen if:")
            print("   - Images have been modified between local and platform versions")
            print("   - Different image formats or compression levels")
            print("   - Missing creatives in one of the sources")
            sys.exit(0)
        
        # Format final mapping
        final_mapping = format_final_mapping(merged_df)
        
        # Save results
        save_final_mapping(final_mapping, args.output)
        
        # Print summary
        print_summary(local_df, platform_df, final_mapping)
        
        if args.verbose:
            print(f"\nFinal mapping preview:")
            print(final_mapping.head())
        
    except FileNotFoundError as e:
        print(f"‚ùå File not found: {e}")
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå Invalid data: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 